"""Initial migration create tables

Revision ID: 0268ad47e39d
Revises: 
Create Date: 2025-04-10 09:37:38.081397

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import hashlib
from sqlalchemy.sql import table, column


# revision identifiers, used by Alembic.
revision: str = '0268ad47e39d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('permissions', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('subscription_plans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('billing_cycle', sa.Integer(), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('node_limit', sa.Integer(), nullable=True),
    sa.Column('hourly_rate', sa.Numeric(precision=10, scale=4), nullable=True),
    sa.Column('features', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=255), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('nickname', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('reset_password_token', sa.String(length=255), nullable=True),
    sa.Column('reset_password_token_expiry', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_reset_password_token'), 'users', ['reset_password_token'], unique=True)
    op.create_index(op.f('ix_users_role_id'), 'users', ['role_id'], unique=False)
    op.create_table('coupons',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('type', sa.Integer(), nullable=False),
    sa.Column('value', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('usage_limit', sa.Integer(), nullable=True),
    sa.Column('user_limit', sa.Integer(), nullable=False),
    sa.Column('expiry_date', sa.DateTime(), nullable=True),
    sa.Column('min_purchase_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('applicable_plan_ids', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_coupons_code'), 'coupons', ['code'], unique=True)
    op.create_table('gateway_request_logs',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.Column('request_id', sa.String(length=64), nullable=False),
    sa.Column('source_ip', sa.String(length=45), nullable=True),
    sa.Column('http_method', sa.String(length=10), nullable=False),
    sa.Column('request_path', sa.String(length=1024), nullable=False),
    sa.Column('request_headers', sa.JSON(), nullable=True),
    sa.Column('target_service', sa.String(length=100), nullable=True),
    sa.Column('target_path', sa.String(length=1024), nullable=True),
    sa.Column('response_status_code', sa.Integer(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_gateway_request_logs_request_id'), 'gateway_request_logs', ['request_id'], unique=True)
    op.create_index(op.f('ix_gateway_request_logs_tenant_id'), 'gateway_request_logs', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_gateway_request_logs_timestamp'), 'gateway_request_logs', ['timestamp'], unique=False)
    op.create_table('notifications',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('subject', sa.String(length=255), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('channel', sa.Integer(), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_notifications_status'), 'notifications', ['status'], unique=False)
    op.create_index(op.f('ix_notifications_tenant_id'), 'notifications', ['tenant_id'], unique=False)
    op.create_table('payment_gateways',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('config', sa.JSON(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['updated_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('system_configurations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['updated_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_system_configurations_key'), 'system_configurations', ['key'], unique=True)
    op.create_table('system_logs',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_system_logs_level'), 'system_logs', ['level'], unique=False)
    op.create_index(op.f('ix_system_logs_timestamp'), 'system_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_system_logs_user_id'), 'system_logs', ['user_id'], unique=False)
    op.create_table('user_authentications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('provider_user_id', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'provider', 'provider_user_id', name='uq_user_provider_id')
    )
    op.create_index(op.f('ix_user_authentications_tenant_id'), 'user_authentications', ['tenant_id'], unique=False)
    op.create_table('user_nodes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('config_details', sa.JSON(), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_nodes_tenant_id'), 'user_nodes', ['tenant_id'], unique=False)
    op.create_table('user_notification_preferences',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('notification_type', sa.String(length=50), nullable=False),
    sa.Column('channel', sa.Integer(), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'notification_type', 'channel', name='uq_user_notification_pref')
    )
    op.create_index(op.f('ix_user_notification_preferences_tenant_id'), 'user_notification_preferences', ['tenant_id'], unique=False)
    op.create_table('user_subscriptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('auto_renew', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['subscription_plans.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_subscriptions_status'), 'user_subscriptions', ['status'], unique=False)
    op.create_index(op.f('ix_user_subscriptions_tenant_id'), 'user_subscriptions', ['tenant_id'], unique=False)
    op.create_table('billing_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('subscription_id', sa.Integer(), nullable=True),
    sa.Column('billing_period_start', sa.DateTime(), nullable=False),
    sa.Column('billing_period_end', sa.DateTime(), nullable=False),
    sa.Column('fixed_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('usage_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('discount_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_amount_due', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('computed_hours', sa.Numeric(precision=15, scale=5), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('paid_at', sa.DateTime(), nullable=True),
    sa.Column('payment_gateway_id', sa.Integer(), nullable=True),
    sa.Column('transaction_id', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['payment_gateway_id'], ['payment_gateways.id'], ),
    sa.ForeignKeyConstraint(['subscription_id'], ['user_subscriptions.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_billing_records_status'), 'billing_records', ['status'], unique=False)
    op.create_index(op.f('ix_billing_records_tenant_id'), 'billing_records', ['tenant_id'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('output', sa.Text(), nullable=True),
    sa.Column('logs', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['node_id'], ['user_nodes.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tasks_end_time'), 'tasks', ['end_time'], unique=False)
    op.create_index(op.f('ix_tasks_node_id'), 'tasks', ['node_id'], unique=False)
    op.create_index(op.f('ix_tasks_start_time'), 'tasks', ['start_time'], unique=False)
    op.create_index(op.f('ix_tasks_status'), 'tasks', ['status'], unique=False)
    op.create_index(op.f('ix_tasks_tenant_id'), 'tasks', ['tenant_id'], unique=False)
    op.create_table('user_applied_coupons',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('coupon_id', sa.Integer(), nullable=False),
    sa.Column('billing_record_id', sa.Integer(), nullable=True),
    sa.Column('applied_at', sa.DateTime(), nullable=False),
    sa.Column('discount_applied', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['billing_record_id'], ['billing_records.id'], ),
    sa.ForeignKeyConstraint(['coupon_id'], ['coupons.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_applied_coupons_billing_record_id'), 'user_applied_coupons', ['billing_record_id'], unique=False)
    op.create_index(op.f('ix_user_applied_coupons_coupon_id'), 'user_applied_coupons', ['coupon_id'], unique=False)
    op.create_index(op.f('ix_user_applied_coupons_tenant_id'), 'user_applied_coupons', ['tenant_id'], unique=False)
    # ### end Alembic commands ###

    # --- Seed initial data ---
    # 1. Seed roles table
    roles_table = table('roles',
        column('id', sa.Integer),
        column('name', sa.String),
        column('description', sa.String)
    )
    op.bulk_insert(roles_table, [
        {'id': 1, 'name': 'super_admin', 'description': '超级管理员'},
        {'id': 2, 'name': 'admin', 'description': '管理员'},
        {'id': 3, 'name': 'user', 'description': '普通用户'}
    ])

    # 2. Seed super admin user
    users_table = table('users',
        column('id', sa.Integer),
        column('role_id', sa.Integer),
        column('username', sa.String),
        column('password', sa.String),
        column('nickname', sa.String),
        column('status', sa.Integer) # 假设 status=0 是 active
    )
    # Hash the default password 'admin'
    hashed_password = hashlib.sha256('admin'.encode()).hexdigest()
    op.bulk_insert(users_table, [
        {
            'id': 1, 
            'role_id': 1, # 'super_admin' 的 ID
            'username': 'admin',
            'password': hashed_password,
            'nickname': '超级管理员',
            'status': 0
        }
    ])

    # 3. 播种订阅计划表 (subscription_plans)
    subscription_plans_table = table('subscription_plans',
        column('id', sa.Integer),
        column('name', sa.String),
        column('description', sa.String),
        column('billing_cycle', sa.Integer),
        column('price', sa.Numeric),
        column('node_limit', sa.Integer),
        column('hourly_rate', sa.Numeric),
        column('features', sa.JSON),
        column('is_active', sa.Boolean)
    )
    # 插入示例计划: 免费版 和 专业版月付
    # billing_cycle: 0 可能表示一次性或免费, 1 月付, 2 年付 (根据模型定义调整)
    op.bulk_insert(subscription_plans_table, [
        {
            'id': 1, 'name': 'Free', 'description': '免费体验计划', 
            'billing_cycle': 0, 'price': 0.00, 'node_limit': 1, 'hourly_rate': None, 
            'features': '{\"storage\": \"1GB\"}', 'is_active': True
        },
        {
            'id': 2, 'name': 'Pro Monthly', 'description': '专业版 (月付)', 
            'billing_cycle': 1, 'price': 29.99, 'node_limit': 5, 'hourly_rate': 0.05, 
            'features': '{\"storage\": \"50GB\", \"support\": \"email\"}', 'is_active': True
        }
    ])

    # 4. 播种支付网关表 (payment_gateways)
    payment_gateways_table = table('payment_gateways',
        column('id', sa.Integer),
        column('name', sa.String),
        column('description', sa.String),
        column('is_active', sa.Boolean),
        column('config', sa.JSON)
    )
    # 插入常用网关，初始设为非激活
    op.bulk_insert(payment_gateways_table, [
        {
            'id': 1, 'name': 'stripe', 'description': 'Stripe 支付', 
            'is_active': False, 'config': '{}' # 配置后续通过环境变量或管理后台设置
        },
        {
            'id': 2, 'name': 'alipay', 'description': '支付宝支付', 
            'is_active': False, 'config': '{}'
        }
    ])
    # --- 结束播种初始数据 ---


def downgrade() -> None:
    """Downgrade schema."""
    # --- 首先删除播种的数据 ---
    # 删除顺序与 upgrade 相反
    op.execute("DELETE FROM payment_gateways WHERE name IN ('stripe', 'alipay')") # 根据 name 删除
    op.execute("DELETE FROM subscription_plans WHERE name IN ('Free', 'Pro Monthly')") # 根据 name 删除
    op.execute("DELETE FROM users WHERE username = 'admin'")
    op.execute("DELETE FROM roles WHERE name IN ('super_admin', 'admin', 'user')")
    # --- 结束删除播种的数据 ---

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_applied_coupons_tenant_id'), table_name='user_applied_coupons')
    op.drop_index(op.f('ix_user_applied_coupons_coupon_id'), table_name='user_applied_coupons')
    op.drop_index(op.f('ix_user_applied_coupons_billing_record_id'), table_name='user_applied_coupons')
    op.drop_table('user_applied_coupons')
    op.drop_index(op.f('ix_tasks_tenant_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_status'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_start_time'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_node_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_end_time'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_billing_records_tenant_id'), table_name='billing_records')
    op.drop_index(op.f('ix_billing_records_status'), table_name='billing_records')
    op.drop_table('billing_records')
    op.drop_index(op.f('ix_user_subscriptions_tenant_id'), table_name='user_subscriptions')
    op.drop_index(op.f('ix_user_subscriptions_status'), table_name='user_subscriptions')
    op.drop_table('user_subscriptions')
    op.drop_index(op.f('ix_user_notification_preferences_tenant_id'), table_name='user_notification_preferences')
    op.drop_table('user_notification_preferences')
    op.drop_index(op.f('ix_user_nodes_tenant_id'), table_name='user_nodes')
    op.drop_table('user_nodes')
    op.drop_index(op.f('ix_user_authentications_tenant_id'), table_name='user_authentications')
    op.drop_table('user_authentications')
    op.drop_index(op.f('ix_system_logs_user_id'), table_name='system_logs')
    op.drop_index(op.f('ix_system_logs_timestamp'), table_name='system_logs')
    op.drop_index(op.f('ix_system_logs_level'), table_name='system_logs')
    op.drop_table('system_logs')
    op.drop_index(op.f('ix_system_configurations_key'), table_name='system_configurations')
    op.drop_table('system_configurations')
    op.drop_table('payment_gateways')
    op.drop_index(op.f('ix_notifications_tenant_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_status'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_gateway_request_logs_timestamp'), table_name='gateway_request_logs')
    op.drop_index(op.f('ix_gateway_request_logs_tenant_id'), table_name='gateway_request_logs')
    op.drop_index(op.f('ix_gateway_request_logs_request_id'), table_name='gateway_request_logs')
    op.drop_table('gateway_request_logs')
    op.drop_index(op.f('ix_coupons_code'), table_name='coupons')
    op.drop_table('coupons')
    op.drop_index(op.f('ix_users_role_id'), table_name='users')
    op.drop_index(op.f('ix_users_reset_password_token'), table_name='users')
    op.drop_table('users')
    op.drop_table('subscription_plans')
    op.drop_table('roles')
    # ### end Alembic commands ###
